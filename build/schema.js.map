{"version":3,"sources":["../src/schema.js"],"names":["request","require","resolvers","Query","allSeattleWages","uri","then","blob","JSON","parse","dataString","data","wages","map","wage","sid","unstructuredWage","id","position","createdAt","createdMeta","updatedAt","updatedMeta","meta","jobTitle","femaleAvgHrlyRate","noFemaleEmpl","averageOfFemaleMonthsLongevityInCurrentClassification","maleAvgHrlyRate","noMaleEmployees","averageOfMaleMonthsLongevityInCurrentClassification","totalAvgHrlyRate","totalAverageOfMonthsLongevityInCurrentClassification","ratioOfWomenHourlyRateToMenHourlyRatePercentage","notes","push","typeDefs"],"mappings":";;;;;;AAAA;;AAGA;;;;;;;;AADA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;;;AAGA,IAAMC,YAAY;AACdC,WAAO;AACHC,yBAAiB,2BAAM;AACnB,mBAAO,8BAAG,EAAEC,6DAAF,EAAH,EAAsEC,IAAtE,CAA2E,sBAAc;AAC9F,oBAAIC,OAAOC,KAAKC,KAAL,CAAWC,UAAX,CAAX;AACA,oBAAIC,OAAOJ,KAAK,MAAL,CAAX;AACA,oBAAIK,QAAQ,EAAZ;AACAD,qBAAKE,GAAL,CAAU,4BAAoB;AAC1B,wBAAIC,OAAO;AACTC,6BAAKC,iBAAiB,CAAjB,CADI;AAETC,4BAAID,iBAAiB,CAAjB,CAFK;AAGTE,kCAAUF,iBAAiB,CAAjB,CAHD;AAITG,mCAAWH,iBAAiB,CAAjB,CAJF;AAKTI,qCAAaJ,iBAAiB,CAAjB,CALJ;AAMTK,mCAAWL,iBAAiB,CAAjB,CANF;AAOTM,qCAAaN,iBAAiB,CAAjB,CAPJ;AAQTO,8BAAMP,iBAAiB,CAAjB,CARG;AASTQ,kCAAUR,iBAAiB,CAAjB,CATD;AAUTS,2CAAmBT,iBAAiB,CAAjB,CAVV;AAWTU,sCAAcV,iBAAiB,EAAjB,CAXL;AAYTW,+EAAuDX,iBAAiB,EAAjB,CAZ9C;AAaTY,yCAAiBZ,iBAAiB,EAAjB,CAbR;AAcTa,yCAAiBb,iBAAiB,EAAjB,CAdR;AAeTc,6EAAqDd,iBAAiB,EAAjB,CAf5C;AAgBTe,0CAAkBf,iBAAiB,EAAjB,CAhBT;AAiBTgB,8EAAsDhB,iBAAiB,EAAjB,CAjB7C;AAkBTiB,yEAAiDjB,iBAAiB,EAAjB,CAlBxC;AAmBTkB,+BAAOlB,iBAAiB,EAAjB;AAnBE,qBAAX;AAqBAJ,0BAAMuB,IAAN,CAAWrB,IAAX;AACH,iBAvBD;;AAyBA,uBAAOF,KAAP;AACD,aA9BM,CAAP;AA+BH;AAjCE;AADO,CAAlB;;kBAsCe,wCAAqB,EAAEwB,kBAAF,EAAYlC,oBAAZ,EAArB,C","file":"schema.js","sourcesContent":["import { makeExecutableSchema } from 'graphql-tools';\nimport typeDefs from './types.graphql';\nconst request = require('request');\nimport rp from 'request-promise';\n\nconst resolvers = {\n    Query: {\n        allSeattleWages: () => {\n            return rp({ uri: `https://data.seattle.gov/api/views/cf52-s8er/rows.json` }).then(dataString => {\n              let blob = JSON.parse(dataString);\n              let data = blob[\"data\"];\n              let wages = [];\n              data.map( unstructuredWage => {\n                  let wage = {\n                    sid: unstructuredWage[0],\n                    id: unstructuredWage[1],\n                    position: unstructuredWage[2],\n                    createdAt: unstructuredWage[3],\n                    createdMeta: unstructuredWage[4],\n                    updatedAt: unstructuredWage[5],\n                    updatedMeta: unstructuredWage[6],\n                    meta: unstructuredWage[7],\n                    jobTitle: unstructuredWage[8],\n                    femaleAvgHrlyRate: unstructuredWage[9],\n                    noFemaleEmpl: unstructuredWage[10],\n                    averageOfFemaleMonthsLongevityInCurrentClassification: unstructuredWage[11],\n                    maleAvgHrlyRate: unstructuredWage[12],\n                    noMaleEmployees: unstructuredWage[13],\n                    averageOfMaleMonthsLongevityInCurrentClassification: unstructuredWage[13],\n                    totalAvgHrlyRate: unstructuredWage[14],\n                    totalAverageOfMonthsLongevityInCurrentClassification: unstructuredWage[15],\n                    ratioOfWomenHourlyRateToMenHourlyRatePercentage: unstructuredWage[16],\n                    notes: unstructuredWage[17],\n                  }\n                  wages.push(wage);\n              } );\n\n              return wages;\n            });\n        },\n    }\n}\n\nexport default makeExecutableSchema({ typeDefs, resolvers });"]}